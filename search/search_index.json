{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Welcome to Jeeves!","text":"pippoetry <pre><code>pip install 'jeeves-shell[all]'\n</code></pre> <pre><code>poetry add --group dev --extras=all jeeves-shell\n</code></pre> jeeves.py<pre><code>import rich\nimport sh\n\n\ndef hi():\n\"\"\"Hello world.\"\"\"\n    user_name = sh.whoami()\n    machine = sh.uname('-a')\n\n    rich.print(f'Hello [b]{user_name}[/b]!')\n    rich.print(f'This code is running on: [b]{machine}[/b].')\n</code></pre>  ls jeeves.py  j hi Hello john-connor! This code is running on: Cyberdyne T800!"},{"location":"#features","title":"Features","text":"<ul> <li> <p> Build custom shell commands</p> <p>\u2026to build, compile, lint, format, test, deploy, and  otherwise propel your project.</p> </li> <li> <p> <code>make</code> \u2192 <code>j</code></p> <p>Single entry point to all your custom commands.</p> </li> <li> <p> <code>Makefile</code> \u2192 <code>jeeves.py</code></p> <p>Write your workflows @ Python programming language.</p> <p> <code>jeeves.py</code></p> </li> <li> <p> Based on Typer</p> <p>Brings documentation, arguments, options, validation &amp; more.</p> <p> Typer</p> </li> <li> <p> Batteries</p> <p>Execute shell commands &amp; format output.</p> <p> <code>sh</code> &amp; <code>rich</code> </p> </li> <li> <p> Plugins</p> <p>Share your setup among projects.</p> <p> Plugins</p> </li> </ul>"},{"location":"#see-the-tutorial-for-details","title":"See  The tutorial for details","text":""},{"location":"#lets-talk","title":"Let's talk","text":"<ul> <li> <p> Bug? Feature request?</p> <p> Submit an issue! </p> </li> <li> <p> Anything else?</p> <p>See my site:  yeti.sh </p> </li> </ul>"},{"location":"_hidden/","title":"<code>def _hidden()</code> functions","text":"<p>If function name starts from an underscore, it will not be converted to a command.</p> <p>That is useful for helper reusable functions.</p> jeeves.py<pre><code>def _format_greeting(name: str) -&gt; str:\n    return f'Hello {name}!'\n\n\ndef hi(name: str):\n\"\"\"Greet the user.\"\"\"\n    print(_format_greeting(name))\n</code></pre> <p>\u21d2</p> \u21a6 <code>j</code><pre><code> Usage: j [OPTIONS] COMMAND [ARGS]...                                           \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --log-level                 [debug|info|error]  Logging level.               \u2502\n\u2502                                                 [default: LogLevel.ERROR]    \u2502\n\u2502 --install-completion                            Install completion for the   \u2502\n\u2502                                                 current shell.               \u2502\n\u2502 --show-completion                               Show completion for the      \u2502\n\u2502                                                 current shell, to copy it or \u2502\n\u2502                                                 customize the installation.  \u2502\n\u2502 --help                                          Show this message and exit.  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 hi           Greet the user.                                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"jeeves-py/","title":"jeeves.py","text":"<p>While  GNU Make goals are specified in a file named <code>Makefile</code>, Jeeves looks for commands in a file named <code>jeeves.py</code> in current directory.</p>"},{"location":"jeeves-py/#commands","title":"Commands","text":"<p>Every Python function in <code>jeeves.py</code> is converted into a command.</p> <ul> <li>Docstrings are used as command documentation,</li> <li>Command arguments are configured by arguments of respective functions (and their type hints!)</li> </ul> <p>Let's look at a simple Hello World script.</p> jeeves.py<pre><code>def hi(name: str):\n\"\"\"Greet the user.\"\"\"\n    print(f'Hello {name}!')\n</code></pre> <p>Check out how automated documentation works:</p> \u21a6 <code>j</code><pre><code> Usage: j [OPTIONS] COMMAND [ARGS]...                                           \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --log-level                 [debug|info|error]  Logging level.               \u2502\n\u2502                                                 [default: LogLevel.ERROR]    \u2502\n\u2502 --install-completion                            Install completion for the   \u2502\n\u2502                                                 current shell.               \u2502\n\u2502 --show-completion                               Show completion for the      \u2502\n\u2502                                                 current shell, to copy it or \u2502\n\u2502                                                 customize the installation.  \u2502\n\u2502 --help                                          Show this message and exit.  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 hi           Greet the user.                                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Or, for the given command:</p> \u21a6 <code>j hi --help</code><pre><code> Usage: j hi [OPTIONS] NAME                                                     \n\n Greet the user.                                                                \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  [default: None] [required]                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Let's run it:</p> \u21a6 <code>j hi John</code><pre><code>Hello John!\n</code></pre>"},{"location":"rich/","title":"Pretty output with <code>rich</code>","text":"<p> textualize/rich is a modern library for formatting shell output that we recommend using with <code>jeeves</code>.</p> <p>Installation</p> <p>It will be installed as a dependency of <code>jeeves-shell</code>.</p> <p></p>"},{"location":"rich/#rich-example","title":"Rich example","text":"jeeves.py<pre><code>import rich\n\n\ndef hi(name: str):\n\"\"\"Greet the user.\"\"\"\n    rich.print(f'Hello [red]{name}[/red]!')\n</code></pre> <p>\u21d2</p> \u21a6 <code>j hi John</code><pre><code>Hello John!\n</code></pre> <p>(Well, this output does not actually convey the effect because <code>rich</code> outputs shell markup that's ignored when converting to HTML\u2026 Just trust me \u2014 it will be red in the terminal, I assure you!)</p>"},{"location":"sh/","title":"Shell Commands with <code>sh</code>","text":"<p><code>make</code> is an orchestrator \u2014 it doesn't do much work itself, it calls other commands which do the work. That's what we recommend doing with <code>jeeves</code> as well. Among numerous ways to call other programs from Python we recommend a library named, quite concisely, <code>sh</code>:  amoffat/sh.</p> <p>Installation</p> <p>It will be installed as an optional dependency of <code>jeeves-shell[all]</code>.</p> <p>Alternatives</p> <p>See shell cobminators to check out other available tools.</p> <p></p> <p>By default, it is bundled as a dependency for <code>jeeves</code>, and here is a simple example.</p> jeeves.py<pre><code>import typer\nfrom sh import grep, pip\n\n\ndef list_flake8_plugins():\n\"\"\"List installed plugins for Flake8.\"\"\"\n    typer.echo(\n        grep( # (1)!\n            'flake8-',\n            _in=pip.freeze(),\n        ),\n    )\n</code></pre> <ol> <li>Equivalent to: <code>pip freeze | grep flake8-</code></li> </ol> <p>Shall we execute it?</p> \u21a6 <code>j list-flake8-plugins</code><pre><code>flake8-bandit==3.0.0\nflake8-broken-line==0.5.0\nflake8-bugbear==22.12.6\nflake8-commas==2.1.0\nflake8-comprehensions==3.14.0\nflake8-debugger==4.1.2\nflake8-docstrings==1.7.0\nflake8-eradicate==1.4.0\nflake8-isort==4.2.0\nflake8-polyfill==1.0.2\nflake8-quotes==3.3.2\nflake8-rst-docstrings==0.2.7\nflake8-string-format==0.3.0\n</code></pre> <p><code>sh</code> allows to call shell commands with conciseness and readability of Pythonic syntax. See  the package docs for more detail.</p>"},{"location":"typer/","title":"Typer","text":"<p>Behind the scenes, Jeeves relies upon Typer.</p> <p></p> <p>Every function in <code>jeeves.py</code> is converted into a Typer command. Just as if you did:</p> <pre><code>from typer import Typer\n\napp = Typer()\n\n@app.command()\ndef hi(name: str):\n\"\"\"\u2026\"\"\"\n\nif __name__ == '__main__':\n    app()\n</code></pre> <ul> <li>That's one way how Jeeves reduces the boilerplate;</li> <li>The other way is to expose all those commands via the <code>j</code> shortcut.</li> </ul> <p>Nonetheless, you still can use most Typer features, such as:</p> <ul> <li>define <code>typer.Argument</code>'s and <code>typer.Option</code>'s for your commands,</li> <li>validate user input using type hints,</li> <li>and much more.</li> </ul>"},{"location":"typer/#example-use-typer-features-directly","title":"Example: Use Typer features directly","text":"jeeves.py<pre><code>from enum import Enum, auto\n\nimport typer\n\n\nclass GreetingStyle(Enum):\n\"\"\"Style of the greeting.\"\"\"\n\n    ENGLISH = 'en'\n    ITALIAN = 'it'\n\n\ndef hi(\n    name: str = typer.Argument(\n        ...,\n        help='Name of the one we would like to greet.',\n        envvar='NAME_TO_GREET',\n    ),\n    style: GreetingStyle = typer.Option(\n        GreetingStyle.ENGLISH,\n        help='Style of the greeting.',\n    ),\n):\n\"\"\"Greet the user.\"\"\"\n    greeting = {\n        GreetingStyle.ENGLISH: 'Hello',\n        GreetingStyle.ITALIAN: 'Buongiorno',\n    }[style]\n\n    typer.echo(f'{greeting} {name}!')\n</code></pre> <p>\u21d2</p> \u21a6 <code>j hi --help</code><pre><code> Usage: j hi [OPTIONS] NAME                                                     \n\n Greet the user.                                                                \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  Name of the one we would like to greet.                 \u2502\n\u2502                      [env var: NAME_TO_GREET]                                \u2502\n\u2502                      [default: None]                                         \u2502\n\u2502                      [required]                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --style        [en|it]  Style of the greeting.                               \u2502\n\u2502                         [default: GreetingStyle.ENGLISH]                     \u2502\n\u2502 --help                  Show this message and exit.                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"typer/#example-typer-validation","title":"Example: Typer Validation","text":"\u21a6 <code>j hi --style de</code><pre><code>(stdout is empty)\n</code></pre> <p>Error</p> <pre><code>Usage: j hi [OPTIONS] NAME\nTry 'j hi --help' for help.\n\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Invalid value for '--style': 'de' is not one of 'en', 'it'.                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"advanced/jeeves-package/","title":"<code>jeeves</code> package instead of  <code>jeeves.py</code> file","text":"<p>Instead of Jeeves.py file, a Python package named <code>jeeves</code> can also be used.</p> <ul> <li>That helps to structure code better if you have multiple commands,</li> <li>You no longer need to make sub-commands hidden.</li> </ul> jeeves/init.pyjeeves/test.pyjeeves/lint.py jeeves/__init__.py<pre><code>from jeeves.lint import lint\nfrom jeeves.test import test\n</code></pre> jeeves/test.py<pre><code>import typer\n\ntest = typer.Typer()\n\n\n@test.command()\ndef unit():\n\"\"\"Run unit tests.\"\"\"\n\n\n@test.command()\ndef integration():\n\"\"\"Run integration tests.\"\"\"\n</code></pre> jeeves/lint.py<pre><code>import typer\n\nlint = typer.Typer(no_args_is_help=True)\n\n\n@lint.command()\ndef mypy():\n\"\"\"Run mypy.\"\"\"\n\n\n@lint.command()\ndef flake8():\n\"\"\"Run flake8.\"\"\"\n    print(flake8.__doc__)\n</code></pre>"},{"location":"advanced/jeeves-package/#top-level-documentation","title":"Top level documentation","text":"\u21a6 <code>j</code><pre><code> Usage: j [OPTIONS] COMMAND [ARGS]...                                           \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --log-level                 [debug|info|error]  Logging level.               \u2502\n\u2502                                                 [default: LogLevel.ERROR]    \u2502\n\u2502 --install-completion                            Install completion for the   \u2502\n\u2502                                                 current shell.               \u2502\n\u2502 --show-completion                               Show completion for the      \u2502\n\u2502                                                 current shell, to copy it or \u2502\n\u2502                                                 customize the installation.  \u2502\n\u2502 --help                                          Show this message and exit.  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 lint                                                                         \u2502\n\u2502 test                                                                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"advanced/jeeves-package/#command-documentation","title":"Command documentation","text":"\u21a6 <code>j lint</code><pre><code> Usage: j lint [OPTIONS] COMMAND [ARGS]...                                      \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 flake8                       Run flake8.                                     \u2502\n\u2502 mypy                         Run mypy.                                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"advanced/jeeves-package/#sub-command-documentation","title":"Sub command documentation","text":"\u21a6 <code>j lint flake8 --help</code><pre><code> Usage: j lint flake8 [OPTIONS]                                                 \n\n Run flake8.                                                                    \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"advanced/jeeves-package/#and-execution","title":"\u2026and execution","text":"\u21a6 <code>j lint flake8</code><pre><code>Run flake8.\n</code></pre>"},{"location":"advanced/sub-commands/","title":"Sub-commands","text":"<p>If <code>j</code> exports too many commands, it might make sense to group them into subcommands. This is done by defining Typer applications in jeeves.py.</p> jeeves.py<pre><code>import typer\n\nlint = typer.Typer(no_args_is_help=True)\ntest = typer.Typer(no_args_is_help=True)\n\n\n@lint.command(name='mypy')\ndef _mypy():\n\"\"\"Run mypy.\"\"\"\n\n\n@lint.command(name='flake8')\ndef _flake8():\n\"\"\"Run flake8.\"\"\"\n    print(_flake8.__doc__)\n\n\n@test.command(name='unit')\ndef _unit():\n\"\"\"Run unit tests.\"\"\"\n\n\n@test.command(name='integration')\ndef _integration():\n\"\"\"Run integration tests.\"\"\"\n</code></pre>"},{"location":"advanced/sub-commands/#top-level-documentation","title":"Top level documentation","text":"\u21a6 <code>j</code><pre><code> Usage: j [OPTIONS] COMMAND [ARGS]...                                           \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --log-level                 [debug|info|error]  Logging level.               \u2502\n\u2502                                                 [default: LogLevel.ERROR]    \u2502\n\u2502 --install-completion                            Install completion for the   \u2502\n\u2502                                                 current shell.               \u2502\n\u2502 --show-completion                               Show completion for the      \u2502\n\u2502                                                 current shell, to copy it or \u2502\n\u2502                                                 customize the installation.  \u2502\n\u2502 --help                                          Show this message and exit.  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 lint                                                                         \u2502\n\u2502 test                                                                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Hidden commands</p> <p>Note that we have to use underscore here, otherwise <code>def mypy</code> and other functions will be bound to the top-level <code>j</code> command. See def _hidden() for details. See Jeeves package to see how to avoid that.</p>"},{"location":"advanced/sub-commands/#sub-command-level-documentation","title":"Sub-command level documentation","text":"\u21a6 <code>j lint</code><pre><code> Usage: j lint [OPTIONS] COMMAND [ARGS]...                                      \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 flake8                       Run flake8.                                     \u2502\n\u2502 mypy                         Run mypy.                                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"advanced/sub-commands/#nested-command","title":"Nested command","text":"\u21a6 <code>j lint flake8</code><pre><code>Run flake8.\n</code></pre>"},{"location":"plugins/how-to/","title":"Your new <code>jeeves-super-plugin</code>","text":"<ul> <li>Create a Python 3.10+ virtual env for your new plugin project</li> <li><code>pip install -U pip poetry</code></li> <li><code>poetry init</code></li> <li><code>poetry add jeeves-shell --extras=all</code></li> <li>Write into <code>pyproject.toml</code>:</li> </ul> <pre><code>[tool.poetry.plugins.jeeves]\nsuper-plugin = \"jeeves_super_plugin:app\"\n</code></pre> <ul> <li>Create your Typer instance:</li> </ul> jeeves_super_plugin/__init__.py<pre><code>import typer\n\napp = typer.Typer(no_args_is_help=True)\n\n@app.command()\ndef hi(name: str):\n\"\"\"Greet the user.\"\"\"\n\n@app.command()\ndef bye():\n\"\"\"Bid farewell.\"\"\"\n</code></pre> <ul> <li><code>poetry install</code></li> <li><code>j super-plugin</code></li> </ul> <p>You should see <code>hi</code> and <code>bye</code> as available commands.</p>"},{"location":"plugins/how-to/#special-plugin-name-__root__","title":"Special plugin name: <code>__root__</code>","text":"<pre><code>[tool.poetry.plugins.jeeves]\n__root__ = \"jeeves_super_plugin:app\"\n</code></pre> <p>This will mean that your plugin replaces the default root Jeeves app, and your commands will be available as</p> <ul> <li><code>j hi</code> instead of <code>j super-plugin hi</code></li> <li><code>j bye</code> instead of <code>j super-plugin bye</code>.</li> </ul> <p>This is useful for plugins like <code>jeeves-yeti-pyproject</code>, to make the commands you very often use, like <code>lint</code>, faster to type.</p>"},{"location":"plugins/why/","title":"Why plugins?","text":"For a company For an individual <p>You have multiple projects/repositories, and you have very similar or identical deployment, testing, and linting rules.</p> <p>You have multiple open source repositories, and you would like to maintain the same standards for each and avoid tedious and repeated setup tasks for them.</p>"},{"location":"plugins/why/#what-is-a-plugin","title":"What is a plugin?","text":"<p><code>jeeves</code> plugin is an installable Python package which declares <code>jeeves</code> commands. You do not need to copy <code>jeeves.py</code> from one project to another; you can define a plugin with reusable commands, and install that plugin as dev dependency. </p>"},{"location":"plugins/why/#plugin-example-jeeves-yeti-pyproject","title":"Plugin example: <code>jeeves-yeti-pyproject</code>","text":"<p>This is a custom plugin created to manage my own open source projects.</p> <ul> <li>It brings <code>pytest</code> and a few plugins for it as dependencies; <code>j test</code> command tests Python code exactly as I like it to be tested</li> <li>It also has a number of linters and <code>flake8</code> plugins, <code>j lint</code> uses a shared configuration for those</li> <li>I no longer have to install all those dev dependencies for every new project and to copy-paste their configuration files</li> <li>If one plugin conflicts with another, I resolve the issue only once and then just <code>poetry update</code> all my projects</li> </ul> <pre><code>poetry add --group dev jeeves-yeti-pyproject\n</code></pre>"},{"location":"plugins/why/#top-level-documentation","title":"Top level documentation","text":"\u21a6 <code>j</code><pre><code> Usage: j [OPTIONS] COMMAND [ARGS]...                                           \n\n Manage a Python project.                                                       \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --log-level                 [debug|info|error]  Logging level.               \u2502\n\u2502                                                 [default: LogLevel.ERROR]    \u2502\n\u2502 --install-completion                            Install completion for the   \u2502\n\u2502                                                 current shell.               \u2502\n\u2502 --show-completion                               Show completion for the      \u2502\n\u2502                                                 current shell, to copy it or \u2502\n\u2502                                                 customize the installation.  \u2502\n\u2502 --help                                          Show this message and exit.  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 clear-poetry-cache       Clear Poetry cache.                                 \u2502\n\u2502 commit                   Create a commit.                                    \u2502\n\u2502 cover-image              Generate cover image for the front page.            \u2502\n\u2502 deploy-to-github-pages   Build the docs &amp; deploy \u2192 gh-pages branch.          \u2502\n\u2502 fmt                      Auto format code.                                   \u2502\n\u2502 install-graphviz         Install graphviz, which is a prerequisite for some  \u2502\n\u2502                          helper packages.                                    \u2502\n\u2502 install-mkdocs-insiders  Install Insiders version of `mkdocs-material`       \u2502\n\u2502                          theme.                                              \u2502\n\u2502 lint                     Lint code.                                          \u2502\n\u2502 safety                   Check installed Python packages for                 \u2502\n\u2502                          vulnerabilities.                                    \u2502\n\u2502 serve                    Serve documentation locally.                        \u2502\n\u2502 test                     Unit test code.                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"project/roadmap/","title":"Roadmap","text":"%3 file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b102 \u22bb Move jeeves-yeti- pyproject \u2192 jeeves- sh org? True False file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b98 \u22bb Document jeeves- yeti-pyproject At GitHub pages At jeeves.sh file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b102:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b98:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b48 \u22bb What do we call when we want to process the DAG? DAG itself One of functions of the DAG file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43 `j generate` @ `jeeves-yeti- pyproject` file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b48:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b61 \u22bb How to build a DAG? Use an existing library Build a new dependencies DAG library file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b59 jeeves-generate \u2192 PyPI file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b61:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b59:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b79 \u22bb Implement `jeeves boilerplate` Run tasks registered as plugins to jeeves-boilerplate Somehow with Cookiecutter? file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b78 Generate Github workflows at jeeves- yeti-pyproject file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b79:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b78:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b87 \u22bb sh command streams decorator \u2014 where? Part of Jeeves Part of sh Separate package local_publish \u22bb jeeves \u2192 social media HN dev.to \u2026 file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b87:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b96 Build a Plugins page with catalog file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b98:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b96:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b101 jeeves-yeti- pyproject only scans and formats python packages, not individual files like jeeves.py file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b101:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b98:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b103 See if there is a tool to document Click with mkdocs file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b103:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b98:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b104 Terminal output from jeeves-yeti- pyproject is broken file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b104:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b98:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b44 Generate GitHub workflows file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b44:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b45 docs/index.md | iolanta-jinja2 \u2192 README.md file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b45:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b46 poetry lock --no- update file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b46:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b47 \u2026 Any other generation commands? file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b47:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b49 Implement CI mode for jeeves-generate DAG file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b49:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b50 Use the collected statistics of tasks performance to determine which tasks to run first file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b50:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b51 Publish dry.jeeves.sh file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b51:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b54 Record the statistics of tasks performance file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b54:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b50:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b55 jeeves-dry \u2192 PyPI file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b55:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b51:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b56 Update main Jeeves app file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b56:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b55:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b57 Add dry-run argument to the Jeeves app file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b57:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b55:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b58 Post-process iterators as commands file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b58:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b55:w local_jeeves-generate Publish generate.jeeves.sh file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b59:e-&gt;local_jeeves-generate:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b60 Do not generate anything if there are uncommitted changes file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b60:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b59:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b64 Compare Python dependencies libraries file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b64:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b61:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b65 Get dependencies from Annotated file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b65:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b61:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b66 Get dependencies from decorator arguments file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b66:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b61:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b68 I want iolanta-prov to finally write good comparisons file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b68:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b64:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b70 On Typer card, say why Typer is cool file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b70:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b71 Document why we chose Typer file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b71:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b72 In alternatives tables, highlight the chosen alternative with green background file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b72:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b71:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b73 Document which license Jeeves is using file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b73:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b74 Badges in README.md are in bad shape file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b74:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b75 Tests are failing @ CI file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b75:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b74:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b76 Implement &amp; use Side By Side display with cards file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b76:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b77 Document use cases file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b77:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b78:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b85 Sync jeeves.py example with home page example file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b85:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b86 Make social cards file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b86:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b91 progress bars when executing sh commands file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b91:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b87:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b92 Support dependencies file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b92:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b93 Review awesome- python-dependency- injection file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b93:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b92:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b94 Document alternatives file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b94:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b92:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b95 pre-conditions perhaps file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b95:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b92:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b96:e-&gt;local_publish:w file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b97 Support cards in mkdocs-iolanta file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b97:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b96:w local_jeeves-generate:e-&gt;file_///home/runner/work/jeeves-shell/jeeves-shell/docs/project/roadmap.md/b43:w"},{"location":"project/decisions/shell-combinators/","title":"Use <code>sh</code> for shell combinators","text":"Import hook Native kwargs Minimalism Score Return code exceptions Partial commands Subcommands Execution Context Notes tomerfiliba/plumbum \u2714\ufe0f \u274c 1 \u2714\ufe0f \u2714\ufe0f \u274c Does shell coloring and building of CLI applications amoffat/sh \u2714\ufe0f \u2714\ufe0f 3 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f aeroxis/sultan \u274c elcaminoreal/seashore \u274c dgilland/shelmet \u274c"},{"location":"project/decisions/start-jeeves-project/","title":"Start Jeeves project","text":""},{"location":"project/decisions/start-jeeves-project/#context","title":"Context","text":"<p>There are a few alternatives available, none of which I 100% like. </p> Language Last release Command name Engine for CLI commands Plugin support Dependencies system Notes GNU Make make + bash make \u274c \u2714\ufe0f Paver python 2017-12-31 paver Own syntax with decorators \u274c \u2714\ufe0f Envelops setuptools and distutils, conflicting with Poetry. invoke python 2023-05-16 invoke Own syntax with @task decorators \u2714\ufe0f Has tools to define CLI commands (without type hints support though) and calling commands. Subjectively \u2014 too much is stuffed into one single package. scons python 2023-03-21 scons No way to define custom commands \u2714\ufe0f basher bash manage python 2021-02-07 manage Click \u274c \u274c jeeves python 2023-05-19 j typer \u2714\ufe0f \u274c"},{"location":"project/decisions/start-jeeves-project/#decision","title":"Decision","text":"<p>Create a new project \u2014 the documentation for which you are reading \u263a</p>"},{"location":"project/decisions/unpack/","title":"<code>Unpack[]</code> a dataclass or TypedDict \u2192 Typer command arguments","text":""},{"location":"project/decisions/unpack/#context","title":"Context","text":"<p>When designing command-line interfaces with Typer, we often encounter scenarios where multiple commands share similar or identical sets of arguments. To avoid redundancy and improve code maintainability, we are considering using the Unpack[] type hint, which would allow us to unpack fields from a <code>dataclass</code> or <code>TypedDict</code> directly into command arguments.</p> <p>Votum Separatum: Callbacks</p> <p>Functions that accept multiple common parameters are often united under one Typer sub-application. This allows for the use of callback functions and Typer context to handle shared parameters.</p> <p><code>typing.Unpack</code> was introduced in PEP 646 Variadic Generics and then further extended in PEP 692 Using TypedDict for more precise **kwargs typing. We can make use of that.</p>"},{"location":"project/decisions/unpack/#decision","title":"Decision","text":"<p>We will use the <code>Unpack[]</code> type hint to unpack fields from dataclasses or TypedDicts and map them directly to Typer command arguments.</p> <p>Example:</p> <pre><code>from typing import Unpack\nfrom dataclasses import dataclass\nfrom typer import Typer\n\n@dataclass\nclass Person:\n\"\"\"Person.\"\"\"\n\n    first_name: str\n    last_name: str\n\napp = Typer()\n\n@app.command()\ndef process_person(person: Unpack[Person]):\n\"\"\"Do something with a person.\"\"\"\n</code></pre> <p>This approach allows users to provide each attribute of <code>Person</code> as a separate argument: <code>command --first-name John --last-name Doe</code>.</p>"},{"location":"project/decisions/unpack/#consequences","title":"Consequences","text":"<p>We will need to implement this for Typer mainstream code base.</p> <ul> <li>Source code: <code>def get_params_from_function</code> function,</li> <li>which needs to be refactored a bit and generalized,</li> <li>and expanded to support <code>Unpack</code>.</li> <li>There is a GitHub issue which might contain relevant research.</li> </ul>"},{"location":"reference/options/","title":"Options","text":"Default Purpose --log-level error Logging level. Use info or debug for more detailed logging and to print tracebacks."},{"location":"reference/environment-variables/","title":"Environment variables","text":"Default Purpose JEEVES_ROOT (current directory) Location of jeeves.py file or jeeves package. JEEVES_DISABLE_PLUGINS (unset) Set this to ignore any installed plugins (and thus only use jeeves.py or jeeves package commands). Might be useful for debugging."},{"location":"reference/environment-variables/JEEVES_ROOT/","title":"JEEVES_ROOT","text":"<p>Available since: 2.1.10</p> <p>Environment variable to define directory containing jeeves.py or jeeves package.</p> ls /home/someone/somewhere<pre><code>jeeves.py\n\u2026\n</code></pre> <p>\u21d2</p> <pre><code>JEEVES_ROOT=/home/someone/somewhere j\n</code></pre>"}]}